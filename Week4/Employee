package Employee;
public class Employee {
    //成员(instance)变量(variable)定义;权限修饰(public，private),类型。名字	
	/*
	 * 为了实现封装性,通常将所有的成员变量修饰为private
	 * 如果外界需要访问他们，则通过定义相关的public方法来实现。
	 * 方法名一般定义为getXxxx和setXxxx,修饰为public
	 */
	private String name;
	private int id;
	private String department;
	private float baseSalary;
	
	
	//成员方法(instance method)的定义:
	/*
	 * 权限修饰(public，private,只能在本类中被访问)
	 * 返回类型，没有返回，则使用void
	 * 名字
	 * 参数(形参类型，形参名)
	 */
	/*
	 * 有一个特殊的方法:方法名和类名的一致。该方法称之为构造方法(constructor)
	 * 1).方法名和类名一致
	 * 2).没有任何返回修饰
	 * 3).自动(新建一个对象)被调用
	 * 4).可以有多个:重载(orverRide,名字一样,但参数不一样)
	 */
	 public  Employee(String name,int id,
			 String department,float baseSalary){
		 this.name = name;
		 this.id = id;
		 this.department = department;
		 this.baseSalary = baseSalary;
		 
	 }
	 //当形参名与成员变量冲突时，使用this来访问成员变量
	 public String getName() {
		 return name;
	 }

		public void setName(String name) {
			this.name = name;
		}
		public float getBaseSalary() {
			return this.baseSalary;
		}
		public void setBaseSalary(float baseSalary) {
			this.baseSalary = baseSalary;
		}
	 public void updateSalary(){
		 this.baseSalary = this.baseSalary * 1.035f;
		 
	 }

		public void displayEmployee() {
			String info = "";
			info = "id=" + this.id + ",name=" + this.name + ",department=" + this.department + ",baseSalary="
					+ this.baseSalary;
			System.out.println(info);
		}
}
public class EmployeeDriver {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 1.创建对象,new时会自动调用相应的("根据参数的个数与类型")构造方法
		Employee emp1 = new Employee("田所浩二", 810, "口头推销", 114514); // new时会自动调用相应的构造方法
		// Employee emp2 = new Employee("tom",1001,"销售",2000);

		// 2.通过对象名.方法来访问public成员(变量或方法).运算符号
		float oldSalary = emp1.getBaseSalary();
		System.out.println("员工1的工资为:" + oldSalary);
		emp1.updateSalary();
		float newSalary = emp1.getBaseSalary();
		System.out.println("加薪后员工1的工资为:" + newSalary);
		emp1.displayEmployee();

		/*
		 * //下面一行是错误的,原因是:department被修饰为private //emp1.department = "销售";
		 * //调用setXxxx方法来取代上行 emp1.setName("销售");
		 */
	}
	

}
